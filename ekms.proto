syntax = "proto3";

package azure.dke.v0;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
option go_package = "git.tesdev.io/thalescpl.io/ekms/apis/ekms/azure/dkev0;dke";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  host: "dke.azure.dpondemand.io"
  info: {
    title: "Azure KeyManager DKE API"
    version: "0.9"
    contact: {
      name: "Thales CPL";
      url: "https://dke.azure.dpondemand.io"
    }
  }
  schemes:
      HTTPS
  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_OAUTH2
        name: "Authorization"
        in: IN_HEADER
        flow: FLOW_APPLICATION
        authorization_url: "https://login.windows.net/common/oauth2/authorize"
        token_url: "https://login.windows.net/common/oauth2/authorize"
      }
    }
  }
};
// Azure DKE Key Management Service
//
// Performs operations on cryptographic keys. Implements a REST
// model with the following objects:
//
// * [Key][]
service AzureDKEKeyManagementService {
  // Gets the public key
  rpc GetPublicKey(PublicKeyRequest) returns (PublicKeyResponse) {
    option (google.api.http) = {
      get: "/{key_name}"
    };

    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: [
        {
          key: "400"
          value: {
            description: "Invalid key"
          }
        },
        {
          key: "403"
          value: {
            description: "Permission denied"
          }
        }
      ]
    };
  }

  // Decrypts using the private key. Credentials need to be provided via the
  // Authorization header with the Bearer JWT token.
  rpc Decrypt(DecryptRequest) returns (DecryptResponse) {
    option (google.api.http) = {
      post: "/{key_name}/{key_id}/decrypt"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: [
        {
          key: "400"
          value: {
            description: "Invalid request"
          }
        },
        {
          key: "401"
          value: {
            description: "Unauthorized"
          }
        },
        {
          key: "403"
          value: {
            description: "Permission denied"
          }
        }
      ]
      security: {
        security_requirement: {
          key: "Bearer"
          value: {}
        }
      }
    };
  }
}

// Gets the public key
message PublicKeyRequest {
  // Required. Key Name
  // e.g. `TestKey1`.
  string key_name = 1;
}

// Response message for [AzureDKEKeyManagementService.GetPublicKey][].
message PublicKeyResponse {
  // Key information
  message Key {
    // Key type
    string kty = 1;
    
    // Key
    string n = 2;
    
    // Key exponent (typically 65537)
    int32  e = 3;
    
    // Algorithm
    string alg = 4;
    
    // Key ID
    string kid = 5;
  }

  // The key
  Key key = 1;
}

// Decrypt using the private key. The encrypted text must have been encrypted
// using the private key.
message DecryptRequest {
  // Required. Name of the key
  // e.g. `TestKey1`.
  string key_name = 1;

  // Required. The identifier of the key
  // (as provided by [AzureDKEKeyManagementService.GetKey][])
  // e.g.
  // `D798B899-3350-4F5C-A608-2EDA37CB0EBD`
  string key_id = 2;

  // Required. Algorithm
  // e.g. `RSA-OAEP-256`
  string alg = 3;

  // Required. Encrypted value, base64 encoded
  string value = 4;
}

// Response message for [AzureDKEKeyManagementService.Decrypt][].
message DecryptResponse {
  // The decrypted data, base64 encoded
  bytes value = 1;
}
